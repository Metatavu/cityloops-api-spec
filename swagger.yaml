openapi: 3.0.0
info:
  version: 1.0.0
  title: CityLoops API
security:
  - bearerAuth: []
paths:

  /system/ping:
    get:
      summary: System ping endpoint
      operationId: ping
      tags:
        - system
      responses:
        '200':
          description: System ping response
          content:
            text/plain:
              schema:
                description: Returns PING
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      operationId: listCategories
      summary: List categories.
      description: Lists categories
      tags:
        - Categories
      parameters:
        - name: parentCategoryId
          in: query
          description: query by parent category id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A category list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createCategory
      summary: Create a category.
      description: Creates new category
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        description: Payload
        required: true
      responses:
        "200":
          description: Created category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /categories/{categoryId}:
    get:
      operationId: findCategory
      summary: Find a category.
      description: Finds a category by id
      tags:
        - Categories
      parameters:
        - name: categoryId
          required: true
          in: path
          description: category id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateCategory
      summary: Updates a category.
      description: Updates category
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        description: Payload
        required: true
      parameters:
        - name: categoryId
          required: true
          in: path
          description: category id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteCategory
      summary: Deletes a category.
      description: Deletes category
      tags:
        - Categories
      parameters:
        - name: categoryId
          required: true
          in: path
          description: category id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items:
    get:
      operationId: listItems
      summary: List items.
      description: Lists items
      tags:
        - Items
      parameters:
        - name: userId
          in: query
          required: false
          description: query by user id
          schema:
            type: string
            format: uuid
        - name: categoryId
          in: query
          required: false
          description: Query by category id
          schema:
            type: string
            format: uuid
        - name: firstResult
          in: query
          description: index of the first result
          schema:
            type: integer
        - name: maxResults
          in: query
          required: false
          description: limit results to this amount
          schema:
            type: integer
        - name: sortByDateOldestFirst
          in: query
          description: Sort by date, return the oldest entry first
          schema:
            type: boolean
        - name: includeExpired
          in: query
          required: false
          description: includes expired items requires admin permissions if used to list other users than your items that are expired
          schema:
            type: boolean
        - name: itemType
          in: query
          required: false
          description: Filter by item type
          schema:
            $ref: "#/components/schemas/ItemType"
      responses:
        "200":
          description: An item list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createItem
      summary: Create an item.
      description: Creates new item
      tags:
        - Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
        description: Payload
        required: true
      responses:
        "200":
          description: Created item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items/{itemId}:
    get:
      operationId: findItem
      summary: Find an item.
      description: Finds an item by id
      tags:
        - Items
      parameters:
        - name: itemId
          required: true
          in: path
          description: item id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: An item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateItem
      summary: Updates an item.
      description: Updates item
      tags:
        - Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
        description: Payload
        required: true
      parameters:
        - name: itemId
          required: true
          in: path
          description: item id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteItem
      summary: Deletes an item.
      description: Deletes item
      tags:
        - Items
      parameters:
        - name: itemId
          required: true
          in: path
          description: item id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    post:
      operationId: createUser
      summary: Create a user.
      description: Creates new user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Payload
        required: true
      responses:
        "200":
          description: Created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}:
    get:
      operationId: findUser
      summary: Find a user.
      description: Finds a user by id
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateUser
      summary: Updates a user.
      description: Updates user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Payload
        required: true
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteUser
      summary: Deletes a user.
      description: Deletes user
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /publicUsers/{userId}:
    get:
      operationId: findPublicUser
      summary: Find a public user.
      description: Finds a public user by id
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUser"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /searchHounds:
    get:
      operationId: listSearchHounds
      summary: List search hounds.
      description: Lists search hounds
      tags:
        - SearchHounds
      parameters:
        - name: userId
          in: query
          description: query by user id
          schema:
            type: string
            format: uuid
        - name: categoryId
          in: query
          description: query by category id
          schema:
            type: string
            format: uuid
        - name: notificationsOn
          in: query
          description: query by notification on boolean
          schema:
            type: boolean
      responses:
        "200":
          description: List of search hounds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchHound"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createSearchHound
      summary: Create a search hound.
      description: Creates new search hound
      tags:
        - SearchHounds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchHound"
        description: Payload
        required: true
      responses:
        "200":
          description: Created search hound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchHound"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /searchHounds/{searchHoundId}:
    get:
      operationId: findSearchHound
      summary: Find a search hound.
      description: Finds a search hound by id
      tags:
        - SearchHounds
      parameters:
        - name: searchHoundId
          required: true
          in: path
          description: search hound id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A search hound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchHound"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateSearchHound
      summary: Updates a search hound.
      description: Updates search hound
      tags:
        - SearchHounds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchHound"
        description: Payload
        required: true
      parameters:
        - name: searchHoundId
          required: true
          in: path
          description: search hound id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated search hound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchHound"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteSearchHound
      summary: Deletes a search hound.
      description: Deletes search hound
      tags:
        - SearchHounds
      parameters:
        - name: searchHoundId
          required: true
          in: path
          description: search hound id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    Category:
      type: object
      description: Item category object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: Category name
        parentCategoryId:
          type: string
          format: uuid
          description: Parent category
        properties:
          type: array
          items:
            $ref: "#/components/schemas/CategoryProperty"
        creatorId:
          type: string
          format: uuid
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    CategoryProperty:
      type: object
      description: Category property object
      required:
        - name
        - type
        - required
      properties:
        name:
          type: string
          description: Property name
        type:
          $ref: "#/components/schemas/CategoryPropertyInputType"
        required:
          type: boolean
          description: Is this property required
        infoText:
          type: string
          description: Info text for UI
        defaultValue:
          type: string
          description: Default value
        unit:
          type: string
          description: Property unit if type is number

    CategoryPropertyInputType:
      type: string
      description: Category property input type enum
      enum:
        - TEXT
        - TEXTAREA
        - NUMBER

    Item:
      type: object
      description: List item
      required:
        - title
        - categories
        - onlyForCompanies
        - metadata
        - userId
        - price
        - priceUnit
        - paymentMethod
        - delivery
        - expired
        - itemType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          description: Item title
        expired:
          type: boolean
          description: Is item expired or not, settings this false will renew the item
        expiresAt:
          type: string
          format: date-time
          description: Date item expires
          readOnly: true
        category:
          type: string
          format: uuid
          description: Item category id
        onlyForCompanies:
          type: boolean
          description: Is item available only for companies
        metadata:
          $ref: '#/components/schemas/Metadata'
        images:
          type: array
          description: List of image URLs
          items:
            type: string
            format: url
            description: Image URL
        thumbnailUrl:
          type: string
          format: url
          description: URL path for thumbnail
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ItemProperty'
        userId:
          type: string
          format: uuid
          description: User ID
        price:
          type: string
          description: Price of the item
        priceUnit:
          type: string
          description: Price unit of the item
        paymentMethod:
          type: string
          description: Payment method
        delivery:
          type: boolean
          description: Is item deliverable
        deliveryPrice:
          type: number
          format: double
          description: Price of delivery
        itemType:
          $ref: '#/components/schemas/ItemType'
        creatorId:
          type: string
          format: uuid
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    ItemProperty:
      type: object
      description: Key value pairs for items
      required:
        - key
        - value
      properties:
        key:
          type: string
          description: Property key
        value:
          type: string
          description: Property value

    Metadata:
      type: object
      description: Items metadata/non-required information
      required:
        - locationInfo
      properties:
        locationInfo:
          $ref: '#/components/schemas/LocationInfo'
        amount:
          type: integer
          format: int32
        certificates:
          $ref: '#/components/schemas/Certificates'

    LocationInfo:
      type: object
      description: Location info object
      properties:
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        description:
          type: string
          description: Location description
        phone:
          type: string
          description: Phone number
        email:
          type: string
          format: email
          description: Email
        address:
          type: string
          description: Address

    Coordinates:
      type: object
      description: Coordinate object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          description: Latitude number
        longitude:
          type: number
          format: double
          description: Longitude number

    Certificates:
      type: object
      description: Item certificate information
      properties:
        documents:
          type: array
          items:
            type: string
          description: List of document URLs
        stamps:
          type: array
          items:
            type: string
          description: List of certificate stamps

    User:
      type: object
      description: User object
      required:
        - name
        - address
        - email
        - phoneNumber
        - companyAccount
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: User name
        address:
          type: string
          description: User address
        email:
          type: string
          format: email
          description: User email
        phoneNumber:
          type: string
          description: User phone number
        companyAccount:
          type: boolean
          description: Is this user company account
        companyId:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        officeInfo:
          type: string
          description: Location description
        password:
          type: string
        verified:
          type: boolean
          description: Has this user been verified/allowed to use online payment
        priorityUser:
          type: boolean
          description: Is this user prioritized over other users
        description:
          type: string
          description: User description
        logoUrl:
          type: string
          format: url
        creatorId:
          type: string
          format: uuid
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    PublicUser:
      type: object
      description: Public user object
      required:
        - name
        - address
        - email
        - phoneNumber
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: User name
        address:
          type: string
          description: User address
        email:
          type: string
          format: email
          description: User email
        phoneNumber:
          type: string
          description: User phone number
        companyId:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        description:
          type: string
          description: User description
        logoUrl:
          type: string
          format: url
        officeInfo:
          type: string
          description: Location description
        creatorId:
          type: string
          format: uuid
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    SearchHound:
      type: object
      description: Search hound object
      required:
        - name
        - notificationsOn
        - categoryId
        - userId
        - expires
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: Search hound name
        notificationsOn:
          type: boolean
          description: Are notifications on or off
        categoryId:
          type: string
          format: uuid
          description: Category id
        userId:
          type: string
          format: uuid
          description: Owner of this search hound
        expires:
          type: string
          format: date-time
          description: When seach hound expires
        minPrice:
          type: number
          format: double
          description: Minimum price of the item
        maxPrice:
          type: number
          format: double
          description: Maximum price of the item
        creatorId:
          type: string
          format: uuid
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    ItemType:
      type: string
      description: Item type enum
      enum:
        - SELL
        - BUY
        - RENT

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
